from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ContentType, MediaGroup, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from aiogram.types.input_media import InputMediaPhoto
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, BadRequest
import asyncio

import config
from data import texts
from keyboards import inline_keyboards
from loader import dp
from services import db_commands


@dp.callback_query_handler(text='neanunahui')
async def inactive_button(call: CallbackQuery, state: FSMContext):
	await call.answer()


@dp.callback_query_handler(text='faq')
async def faq(call: CallbackQuery, state: FSMContext):
	await call.message.edit_text(
		texts.msg_faq, 
		reply_markup=inline_keyboards.backtomenu_keyboard,
		parse_mode='html'
	)


@dp.callback_query_handler(text='menu')
async def menu(call: CallbackQuery, state: FSMContext):
	await call.answer()
	data = await state.get_data()
	msg_ids = data.get('msg_ids')
	if msg_ids is not None:
		for msg_id in msg_ids:
			await dp.bot.delete_message(call.from_user.id, msg_id)

	await state.finish()
	await state.update_data(msg_ids=[])
	user = await db_commands.select_user_by_user_id(call.from_user.id)
	if user.ads_amount > 0: 
		txet = '\n\n–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª\n\n'
	else: 
		txet = '\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ¬ª\n\n'
			
	await call.message.edit_text(
		f'–°–µ–π—á–∞—Å –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –í–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n'
		f'<b>üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {user.ads_amount}</b>'
		f'{txet}–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ FAQ ‚ùì –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
		reply_markup=inline_keyboards.menu_user,
		parse_mode='html'
	)


@dp.callback_query_handler(text='cancel')
async def cancelling(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	msg_id = data.get('msg_id')
	await dp.bot.delete_message(call.from_user.id, msg_id)
	await call.message.edit_text(
		f'''–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ :(''',
		reply_markup=inline_keyboards.edit_button
	)


@dp.callback_query_handler(text='return_to_my_ads')
async def returning_to_my_ads(call: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	msg_ids = data.get('msg_ids')
	if msg_ids is not None:
		for msg_id in msg_ids:
			await dp.bot.delete_message(call.from_user.id, msg_id)

	await state.finish()
	await state.update_data(msg_ids=[])

	await call.message.edit_text(
		'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π', 
		reply_markup=inline_keyboards.ads_keyboard
	)


@dp.callback_query_handler(text='my_ads')
async def my_ads(call: CallbackQuery, state: FSMContext):
	ads = await db_commands.select_ads_by_user_id(call.from_user.id)
	if ads == []:
		await call.message.edit_text(
			'–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', 
			reply_markup=inline_keyboards.backtomenu_keyboard
		)	
	else:
		await call.message.edit_text(
			'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π', 
			reply_markup=inline_keyboards.ads_keyboard
		)

